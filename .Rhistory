format(Sys.time(), format = "%Y-%m-%d %H:%M:%S"),
source_type,
format_type),
stringsAsFactors = FALSE)
if (source_type == "file") {
# If the source is a file, we add extra meta infos
report_meta <- rbind(report_meta, c("dataset_file_path", input_file_path))
report_meta <- rbind(report_meta, c("dataset_file_md5", file_md5))
} else {
if (format_type=="file") {
# If the format is a file, we add extra meta infos
report_meta <- rbind(report_meta, c("format_file_path", format_file_path))
report_meta <- rbind(report_meta, c("format_file_md5", format_file_md5))
}
}
# Creation of the report objects ----
report_struct <- data.frame(slot = character(),
column = character(),
test = character(),
result = character(),
message = character(),
stringsAsFactors = FALSE)
report_data <- data.frame(slot = character(),
column = character(),
test = character(),
result = character(),
message = character(),
stringsAsFactors = FALSE)
report_files <- c()
report_list <- list()
current_slot_id=3
current_slot <- format_db[["slots"]][current_slot_id,]
def_table <- format_db[[current_slot$definition_table]]
current_slot
def_table
# Test if the slot exists and get data from ----
if (source_type=="file" && tools::file_ext(input_file_path)=="csv" && ! missing(file_name_slot) && tolower(file_name_slot)==tolower(current_slot$slot_name)) {
current_obj_slot <- get_slot_from_obj(obj = obj,
slot_name = "base")
} else {
current_obj_slot <- get_slot_from_obj(obj = obj,
slot_name = current_slot$slot_name)
}
slot_found <- !is.null(current_obj_slot)
slot_found
current_obj_slot
# Removing empty rows and colums of the slot ----
if (nrow(current_obj_slot) > 0) {
# Remove empty rows
current_obj_slot_char_columns <- unlist(lapply(seq_len(ncol(current_obj_slot)), function(x) class(current_obj_slot[, x]))) == "character"
current_obj_slot[, current_obj_slot_char_columns] <- apply(current_obj_slot[, current_obj_slot_char_columns],
c(1, 2),
function(x) {
if(! is.na(x)) {
if(nchar(x) == 0)
return(NA)
}
return(x)
}
)
current_obj_slot <- current_obj_slot[rowSums(is.na(current_obj_slot)) != ncol(current_obj_slot), ]
# Remove empty colums
bad_column <- which(is.na(names(current_obj_slot)) | names(current_obj_slot) == "")
if (length(bad_column) > 0) {
bad_column <- bad_column[which(colSums(is.na(current_obj_slot[, bad_column, drop = FALSE])) == nrow(current_obj_slot))]
current_obj_slot <- current_obj_slot[, -c(bad_column), drop = FALSE]
}
}
# Report on slot structure (exists yes/no and number of lines) ----
if (nrow(current_obj_slot) == 0) {
report_struct <- rbind(report_struct,
data.frame(slot = current_slot$slot_name,
column = NA,
test = "Slot exists ?",
result = "INFO",
message = "Found, but is empty",
stringsAsFactors = FALSE))
} else {
report_struct <- rbind(report_struct,
data.frame(slot = current_slot$slot_name,
column = NA,
test = "Slot exists ?",
result = "OK",
message = paste0("Found: ",
nrow(current_obj_slot),
" rows"),
stringsAsFactors = FALSE))
}
# Trim white space on slot columns names ----
names(current_obj_slot) <- gsub(pattern = "^[[:space:]]+ | [[:space:]]+$",
replacement = "",
tolower(names(current_obj_slot)))
# Detailed report on slot
current_obj_slot_report <- current_obj_slot
def_table
save.image("C:/Users/mdepetri/Desktop/coverfire.RData")
current_column_id=12
current_column <- def_table[current_column_id, ]
current_column_name_formated <- gsub(pattern = "^[[:space:]]+ | [[:space:]]+$",
replacement = "",
tolower(current_column$column_name))
current_column
current_column_name_formated <- gsub(pattern = "^[[:space:]]+ | [[:space:]]+$",
replacement = "",
tolower(current_column$column_name))
current_column_name_formated
if (current_slot$slot_name == "base") {
# is the base object a data.frame of a S3/S4 R object ?
if (inherits(current_obj_slot, "data.frame")) {
# a data frame
if (current_column_name_formated %in% names(current_obj_slot)) {
column_found <- TRUE
current_obj_column <- current_obj_slot[, current_column_name_formated]
} else {
column_found <- FALSE
}
} else {
# a S3/S4 object
# check in the base slot
if (current_column$column_name %in% slot_names(current_obj_slot)) {
current_obj_column <- slot(obj, current_column$column_name)
column_found <- TRUE
} else {
column_found <- FALSE
}
}
} else {
# check in another slot
if (current_column_name_formated %in% names(current_obj_slot)) {
column_found <- TRUE
current_obj_column <- current_obj_slot[, current_column_name_formated]
} else {
column_found <- FALSE
}
}
column_found
current_obj_column
current_obj_column <- as.character(current_obj_column)
if(class(current_obj_column) == "character") {
# Leading or trailing whitespace
current_obj_column <- gsub(pattern = "^[[:space:]]+ | [[:space:]]+$",
replacement = "",
current_obj_column)
}
current_obj_column_report <- rep_len(TRUE, length(current_obj_column))
report_struct <- rbind(report_struct,
data.frame(slot = current_slot$slot_name,
column = current_column$column_name,
test = "Column exists ?",
result = "OK",
message = "Found",
stringsAsFactors = FALSE))
# Check data ----
type_def <- subset(format_db[[paste0(current_column$category, "_types")]],
type_name == current_column$type_name)
local_checked <- FALSE
current_column$category == "date"
local_checked <- TRUE
type_def
local_checked
type_format_date
data = current_obj_column
slot_name = current_slot$slot_name
column_name = current_column$column_name
type_format_date = type_format_date
type_format_date
slot_name
column_name
current_column
current_slot
current_column
time_zone = type_def$time_zone_utc
time_zone
?format_date
?apply
type_def
dim(type_def)[2]
x=type_def
names(x)
i=3
x[, i] != ""
#Format date verification
format_date=apply(type_def,
2,
function(x) {
for (i in 3:dim(x)[2]) {
if (x[, i] != "") {
format_date <- c(format_date, x[, i])
}
}
return(format_date)
})
#Format date verification
format_date=as.character()
#Format date verification
format_date=as.character()
for (i in 3:dim(type_def)[2]) {
if (type_def[, i] != "") {
format_date <- c(format_date, type_def[, i])
}
}
format_date
data = current_obj_column
slot_name = current_slot$slot_name
column_name = current_column$column_name
time_zone = type_def$time_zone_utc
format_date = format_date
rm(validate_date)
all(is.na(data))
format_date
format_date %in% ("yQq")
unique(format_date %in% ("yQq"))
length(unique(format_date %in% ("yQq")))
length(unique(format_date %in% ("yQq"))) != 1
format_date_bis=format_date[-3]
format_date
format_date_bis=c("vmd", "ym", "ymd_hms", "ymd_hm")
head(data)
?lubirdate
?lubridate
?lapply
?apply
lapply
?lapply
lapply(data,
parse_date_time(tz = time_zone,
select_formats = format_date_bis),
quiet=TRUE)
lapply(data,
parse_date_time(data,
tz = time_zone,
select_formats = format_date_bis),
quiet=TRUE)
lapply(data,
parse_date_time(orders = format_date_bis,
tz = time_zone),
quiet=TRUE)
lapply(data,
parse_date_time(data,
orders = format_date_bis,
tz = time_zone),
quiet=TRUE)
format_date_bis
format_date_bis=c("ymd", "ym", "ymd_hms", "ymd_hm")
lapply(data,
parse_date_time(data,
orders = format_date_bis,
tz = time_zone),
quiet=TRUE)
time_zone != TRUE
rep_len
length(data)
time_zone != TRUE
?apply
head(data )
apply(data,
function(x) {
parse_date_time(x,
orders = format_date_bis)
})
apply(data,
FUN = function(x) {
parse_date_time(x,
orders = format_date_bis)
})
apply(data,
function(x) {
parse_date_time(x,
orders = format_date_bis)
})
apply(data,
FUN = function(x) {
parse_date_time(x,
orders = format_date_bis)
})
data
lapply(data,
FUN = function(x) {
parse_date_time(x,
orders = format_date_bis)
})
lapply(data[1:4],
FUN = function(x) {
parse_date_time(x,
orders = format_date_bis)
})
data
format_date
format_date=c("ymd", "ym", "yQq", "ymd_HMS", "ymd_HM")
format_date_bis=c("ymd", "ym", ymd_HMS", "ymd_HM")
format_date_bis=c("ymd", "ym", ymd_HMS", "ymd_HM")
format_date_bis=c("ymd", "ym", "ymd_HMS", "ymd_HM")
lapply(data[1:4],
FUN = function(x) {
parse_date_time(x,
orders = format_date_bis)
})
lapply(data[1:4],
function(x) {
parse_date_time(x,
orders = format_date_bis)
})
data[1:4]
format_date_bis
lapply("01/24",
function(x) {
parse_date_time(x,
orders = format_date_bis)
}
}
data_validity <- is.na(data) | ! is.na(unlist(lapply(data, ymd, quiet=TRUE)))
lapply("01/24",
function(x) {
parse_date_time(x,
orders = format_date_bis)
})
?lubridate
format_date
length(unique(format_date %in% ("yQq"))) != 1
format_date %in% ("yQq")
format_date %in% ("yQq") == TRUE
?each
?match
match(format_date, "yQq")
match(format_date, "yQq", nomatch = "")
match(format_date, "yQq", nomatch = 0)
sum(match(format_date, "yQq", nomatch = 0))
sum(match(format_date, "yQq", nomatch = 0)) != 0
length(format_date)
length(format_date) != 1
sum(match(format_date, "yQq", nomatch = 0)) != 0
format_date
format_date_bis2="yQq"
length(format_date) != 1
length(format_date_bis2) != 1
x="2015-Q3"
?strsplit
strsplit(x, split = c("q", "Q"))
strsplit(x, split = "Q")
unlist(strsplit(x, split = "Q"))
unlist(strsplit(x, split %in% c("Q", "q")))
unlist(strsplit(x, split = c("Q", "q")))
unlist(strsplit(x, split = c("q", "Q")))
unlist(strsplit(x, split = [[qQ]]))
?grep
grep(pattern = [qQ], x)
grep(pattern = "qQ", x)
?gsub
unlist(strsplit(x, split = "[[qQ]]"))
unlist(strsplit(x, split = "[[Q]]"))
gsub("[g]", "", x)
regular
regexec()
regex()
?regex
unlist(strsplit(x, split = "[Q]"))
unlist(strsplit(x, split = "[Qq]"))
x
x <- c("2015-Q3", "2015-q3")
unlist(strsplit(x, split = "[Qq]"))
unlist(strsplit(x, split = "[Q]"))
unlist(strsplit(x, split = "[Qq]"))
x="2015-Q3"
x < -unlist(strsplit(x, split = "[Qq]"))
x <- unlist(strsplit(x, split = "[Qq]"))
x
x
apply(x,
function(x) {
x <- gsub(pattern = "^[[:punct:]]+ | [[:punct:]]+$",
replacement = "",
x)
})
lapply(x,
function(x) {
x <- gsub(pattern = "^[[:punct:]]+ | [[:punct:]]+$",
replacement = "",
x)
})
gsub(pattern = "^[[:punct:]]+ | [[:punct:]]+$",
replacement = "",
"2015-")
gsub(pattern = "[[:punct:]]+$",
replacement = "",
"2015-")
gsub(pattern = "$+[[:punct:]]",
replacement = "",
"2015-")
gsub(pattern = "[[:punct:]]+$",
replacement = "",
"2015-")
gsub(pattern = "[[:punct:]]",
replacement = "",
"2015-")
gsub(pattern = "[[:punct:]]",
replacement = "",
"2015-")
x <- gsub(pattern = "[[:punct:]]",
replacement = "",
x)
x
gsub(pattern = "^[[:punct:]]+ | [[:punct:]]+$",
replacement = "",
"2015-")
gsub(pattern = "^[[:punct:]]+ & [[:punct:]]+$",
replacement = "",
"2015-")
gsub(pattern = "^[[:punct:]]+ | $[[:punct:]]+",
replacement = "",
"2015-")
gsub(pattern = "[[:punct:]]+$",
replacement = "",
"2015-")
gsub(pattern = "^[[:punct:]]+ | [[:punct:]]+$",
replacement = "",
"-2015-")
^[[:punct:]]+ | [[:punct:]]+$
gsub(pattern = "[[:punct:]]",
replacement = "",
"2015-")
devtools::use_testthat()
usethis::use_testthat()
library(testthat)
library(dqassess)
test_check("dqassess")
search()
library(dqassess)
library(dqassess)
library(dqassess)
?build_format_db
library("lintr")
lint_package()
lint_package()
stop("Missing argument input_file_path\n
Please add the correct path to the format definition")
stop("Missing argument input_file_path\nPlease add the correct path to the format definition")
lint_package()
lint_package()
lint_package()
lint_package()
lint_package()
.Machine$double.eps ^ 0.5
lint_package()
?
toupper
?tempdir
tempdir()
?write.table
library(dqassess)
?validate_data
#format_db="D:\\IRD\\5-Projets_&_themes\\1-RECOLAPE\\3-Productions\\WP5\\T5.1_5.2\\1-Data\\cover.xlsx"
format_db="D:\\IRD\\5-Projets_&_themes\\1-RECOLAPE\\3-Productions\\WP5\\T5.1_5.2\\1-Data\\recolape_format_def.xlsx"
# Check for the format definition source type ----
if (inherits(format_db, "character")) {
if (! file.exists(format_db)) {
stop("Wrong format definition file path in \"format_db\" parameter\nPlease correct it before continue")
}
format_file_path <- format_db
format_type <- "file"
format_file_md5 <- tools::md5sum(format_file_path)
format_db <- read_format_db(input_file_path = format_file_path)
cat("Correct import of the format file definition\n")
} else {
format_type <- "object"
}
?createWorkbook
paste("formatdef",
format(Sys.time(), "%Y%m%d_%H%M%S"),
sep = "_")
?Sys.time
?createWorkbook
library(dqassess)
write_format_db_xlsx(format_db = format_db,
output_file_path_dir = "D:\\IRD\\5-Projets_&_themes\\1-RECOLAPE\\3-Productions\\WP5\\T5.1_5.2\\1-Data",
output_file_name = "cover2")
write_format_db_excel(format_db = format_db,
output_file_path_dir = "D:\\IRD\\5-Projets_&_themes\\1-RECOLAPE\\3-Productions\\WP5\\T5.1_5.2\\1-Data",
output_file_name = "cover2")
?write_format_db_excel
library(dqassess)
?write_format_db_excel
library(dqassess)
library(dqassess)
?write_format_db_excel
devtools::use_package("knitr", "Suggests")
?usethis
usethis::use_package("rmarkdown", "Suggests")
usethis::use_package("knitr", "VignetteBuilder")
library(devtools)
document()
warnigns()
warnigns()
warnings()
library(dqassess)
devtools::load_all(".")
warnings()
library(dqassess)
library(dqassess)
warnings()
?dqassess
devtools::document(roclets=c('rd', 'collate', 'namespace', 'vignette'))
warnings()
?knitr
sessionInfo()
packageVersion("knitr")
install.packages(c("assertthat", "crul", "expm", "gdtools", "ggplot2", "gtable", "highr", "httpuv", "keras", "openssl", "pkgbuild", "plotrix", "RcppArmadillo", "rJava", "rlang", "RSpectra", "shiny", "spdep", "tensorflow", "usethis", "xfun"))
packageVersion("knitr")
packageVersion("rmarkdown")
packageVersion("dplyr")
remove.packages("tools", lib="C:/Program Files/R/R-3.5.2/library")
library(dqassess)
library(tools)
